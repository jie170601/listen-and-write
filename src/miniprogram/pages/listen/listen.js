"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Word2Mp3_1 = require("../../utils/Word2Mp3");
var StorageUtil_1 = require("../../utils/StorageUtil");
var WordGroup_1 = require("../../beans/WordGroup");
var AudioUtil_1 = require("../../utils/AudioUtil");
var Params_1 = require("../../beans/Params");
var audioUtil = new AudioUtil_1.AudioUtil(StorageUtil_1.StorageUtil.getParams());
var StateEnum;
(function (StateEnum) {
    StateEnum[StateEnum["STOP"] = 0] = "STOP";
    StateEnum[StateEnum["PLAY"] = 1] = "PLAY";
    StateEnum[StateEnum["PAUSE"] = 2] = "PAUSE";
})(StateEnum || (StateEnum = {}));
Page({
    data: {
        state: StateEnum,
        curState: StateEnum.STOP,
        downloadCount: 0,
        playCount: 0,
        wordGroup: new WordGroup_1.WordGroup(),
        wordGroupList: new Array(),
        showTopTips: false,
        errMsg: '',
        params: new Params_1.Params(),
        mode: Params_1.Mode,
        pron: Params_1.Pronunciation,
        show: false,
        words: [],
        word: ""
    },
    onLoad: function (options) {
        var groupid = options.groupid;
        var wordGroup = new WordGroup_1.WordGroup();
        var wordGroupList = StorageUtil_1.StorageUtil.getWordGroup();
        var params = StorageUtil_1.StorageUtil.getParams();
        if (wordGroupList.length === 0) {
            console.log("没有单词分组");
        }
        wordGroup = wordGroupList[0];
        for (var i = 0; i < wordGroupList.length; i++) {
            if (wordGroupList[i].getId() === groupid) {
                wordGroup = wordGroupList[i];
            }
        }
        this.setData({
            params: params,
            wordGroup: wordGroup,
            wordGroupList: wordGroupList
        });
    },
    translateState: function (state) {
        this.setData({
            curState: state
        });
    },
    play: function () {
        if (this.data.curState === StateEnum.STOP) {
            try {
                var mp3Files = new Word2Mp3_1.Word2Mp3(this.data.params);
                var that_1 = this;
                var words_1 = this.data.wordGroup.getList();
                if (this.data.params.getMode() === Params_1.Mode.RANDOM) {
                    words_1 = this.shuffle(words_1);
                }
                this.setData({
                    show: true,
                    words: words_1
                });
                this.translateState(StateEnum.PLAY);
                mp3Files.getFilePaths(words_1, function (count) {
                    var curNumber = Math.round(count / words_1.length * 100);
                    that_1.setData({
                        downloadCount: curNumber
                    });
                }).then(function (paths) {
                    console.log(paths[0]);
                    that_1.audioReady(paths);
                });
            }
            catch (e) {
                var that_2 = this;
                that_2.setData({
                    showTopTips: true,
                    errMsg: e
                });
                setTimeout(function () {
                    that_2.setData({
                        showTopTips: false,
                        errMsg: ''
                    });
                }, 3000);
            }
        }
        if (this.data.curState === StateEnum.PAUSE) {
            this.translateState(StateEnum.PLAY);
            audioUtil.playOrPause();
        }
    },
    pause: function () {
        this.translateState(StateEnum.PAUSE);
        audioUtil.playOrPause();
    },
    audioReady: function (paths) {
        audioUtil.updateParams(StorageUtil_1.StorageUtil.getParams());
        audioUtil.setPaths(paths);
        audioUtil.setProccess(this.playProccess);
        audioUtil.setEnd(this.end);
        audioUtil.ready();
        audioUtil.playOrPause();
        this.setData({
            show: false
        });
    },
    playProccess: function (cur) {
        var curNumber = Math.round(cur / this.data.wordGroup.getList().length * 100);
        var words = this.data.words;
        var word = words[cur - 1];
        this.setData({
            word: word,
            playCount: curNumber
        });
    },
    end: function () {
        this.setData({
            curState: StateEnum.STOP,
            downloadCount: 0,
            playCount: 0,
            showTopTips: false,
            errMsg: ''
        });
    },
    flushParams: function () {
        StorageUtil_1.StorageUtil.setParams(this.data.params);
    },
    modeChange: function () {
        var params = this.data.params;
        if (params.getMode() === Params_1.Mode.RANDOM) {
            params.setMode(Params_1.Mode.ORDER);
        }
        else if (params.getMode() === Params_1.Mode.ORDER) {
            params.setMode(Params_1.Mode.RANDOM);
        }
        this.setData({
            params: params,
        });
        this.flushParams();
    },
    pronChange: function () {
        var params = this.data.params;
        if (params.getPron() === Params_1.Pronunciation.AMERICAN) {
            params.setPron(Params_1.Pronunciation.BRITISH);
        }
        else if (params.getPron() === Params_1.Pronunciation.BRITISH) {
            params.setPron(Params_1.Pronunciation.AMERICAN);
        }
        this.setData({
            params: params,
        });
        this.flushParams();
    },
    toTest: function () {
        wx.navigateTo({
            url: "../test/test"
        });
    },
    stop: function () {
        audioUtil.stop();
    },
    show: function () {
        this.setData({
            show: false
        });
    },
    hidden: function () {
        this.setData({
            show: true
        });
    },
    shuffle: function (words) {
        var len = words.length;
        for (var i = 0; i < len; i++) {
            var end = len - 1;
            var index = (Math.random() * (end + 1)) >> 0;
            var t = words[end];
            words[end] = words[index];
            words[index] = t;
        }
        return words;
    }
});
//# sourceMappingURL=data:application/json;base64,