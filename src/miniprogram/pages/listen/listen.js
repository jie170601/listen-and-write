"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Word2Mp3_1 = require("../../utils/Word2Mp3");
const StorageUtil_1 = require("../../utils/StorageUtil");
const WordGroup_1 = require("../../beans/WordGroup");
const AudioUtil_1 = require("../../utils/AudioUtil");
const audioUtil = new AudioUtil_1.AudioUtil();
var StateEnum;
(function (StateEnum) {
    StateEnum[StateEnum["STOP"] = 0] = "STOP";
    StateEnum[StateEnum["PLAY"] = 1] = "PLAY";
    StateEnum[StateEnum["PAUSE"] = 2] = "PAUSE";
})(StateEnum || (StateEnum = {}));
Page({
    data: {
        state: StateEnum,
        curState: StateEnum.STOP,
        downloadCount: 0,
        playCount: 0,
        wordGroup: new WordGroup_1.WordGroup(),
        wordGroupList: new Array(),
        showTopTips: false,
        errMsg: ''
    },
    onLoad(options) {
        let groupid = options.groupid;
        let wordGroup = new WordGroup_1.WordGroup();
        let wordGroupList = StorageUtil_1.StorageUtil.getWordGroup();
        if (wordGroupList.length === 0) {
            console.log("没有单词分组");
        }
        wordGroup = wordGroupList[0];
        for (let i = 0; i < wordGroupList.length; i++) {
            if (wordGroupList[i].getId() === groupid) {
                wordGroup = wordGroupList[i];
            }
        }
        this.setData({
            wordGroup: wordGroup,
            wordGroupList: wordGroupList
        });
    },
    translateState(state) {
        this.setData({
            curState: state
        });
    },
    play() {
        if (this.data.curState === StateEnum.STOP) {
            try {
                let mp3Files = new Word2Mp3_1.Word2Mp3();
                let that = this;
                let words = this.data.wordGroup.getList();
                this.translateState(StateEnum.PLAY);
                mp3Files.getFilePaths(words, (count) => {
                    let curNumber = Math.round(count / words.length * 100);
                    that.setData({
                        downloadCount: curNumber
                    });
                }).then((paths) => {
                    console.log(paths[0]);
                    that.audioReady(paths);
                });
            }
            catch (e) {
                let that = this;
                that.setData({
                    showTopTips: true,
                    errMsg: e
                });
                setTimeout(() => {
                    that.setData({
                        showTopTips: false,
                        errMsg: ''
                    });
                }, 3000);
            }
        }
        if (this.data.curState === StateEnum.PAUSE) {
            this.translateState(StateEnum.PLAY);
            audioUtil.playOrPause();
        }
    },
    pause() {
        this.translateState(StateEnum.PAUSE);
        audioUtil.playOrPause();
    },
    audioReady(paths) {
        audioUtil.setPaths(paths);
        audioUtil.setProccess(this.playProccess);
        audioUtil.setEnd(this.end);
        audioUtil.ready();
        audioUtil.playOrPause();
    },
    playProccess(cur) {
        let curNumber = Math.round(cur / this.data.wordGroup.getList().length * 100);
        this.setData({
            playCount: curNumber
        });
    },
    end() {
        this.setData({
            curState: StateEnum.STOP,
            downloadCount: 0,
            playCount: 0,
            showTopTips: false,
            errMsg: ''
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdGVuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibGlzdGVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsbURBQStDO0FBRS9DLHlEQUFtRDtBQUNuRCxxREFBK0M7QUFHL0MscURBQStDO0FBSS9DLE1BQU0sU0FBUyxHQUFhLElBQUkscUJBQVMsRUFBRSxDQUFBO0FBUzNDLElBQUssU0FJSjtBQUpELFdBQUssU0FBUztJQUNaLHlDQUFJLENBQUE7SUFDSix5Q0FBSSxDQUFBO0lBQ0osMkNBQUssQ0FBQTtBQUNQLENBQUMsRUFKSSxTQUFTLEtBQVQsU0FBUyxRQUliO0FBRUQsSUFBSSxDQUFDO0lBQ0gsSUFBSSxFQUFFO1FBQ0osS0FBSyxFQUFDLFNBQVM7UUFDZixRQUFRLEVBQUMsU0FBUyxDQUFDLElBQUk7UUFDdkIsYUFBYSxFQUFDLENBQUM7UUFDZixTQUFTLEVBQUMsQ0FBQztRQUNYLFNBQVMsRUFBQyxJQUFJLHFCQUFTLEVBQUU7UUFDekIsYUFBYSxFQUFDLElBQUksS0FBSyxFQUFjO1FBQ3JDLFdBQVcsRUFBQyxLQUFLO1FBQ2pCLE1BQU0sRUFBQyxFQUFFO0tBQ1Y7SUFDRCxNQUFNLENBQUMsT0FBVztRQUNoQixJQUFJLE9BQU8sR0FBVSxPQUFPLENBQUMsT0FBTyxDQUFBO1FBQ3BDLElBQUksU0FBUyxHQUFjLElBQUkscUJBQVMsRUFBRSxDQUFBO1FBQzFDLElBQUksYUFBYSxHQUFxQix5QkFBVyxDQUFDLFlBQVksRUFBRSxDQUFBO1FBRWhFLElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtTQUN0QjtRQUVELFNBQVMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFNUIsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUM7WUFDckMs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LEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFBO1FBQ3BGLElBQUksQ0FBQyxPQUFRLENBQUM7WUFDWixTQUFTLEVBQUUsU0FBUztTQUNyQixDQUFDLENBQUE7SUFDSixDQUFDO0lBQ0QsR0FBRztRQUNELElBQUksQ0FBQyxPQUFRLENBQUM7WUFDWixRQUFRLEVBQUMsU0FBUyxDQUFDLElBQUk7WUFDdkIsYUFBYSxFQUFDLENBQUM7WUFDZixTQUFTLEVBQUMsQ0FBQztZQUNYLFdBQVcsRUFBRSxLQUFLO1lBQ2xCLE1BQU0sRUFBRSxFQUFFO1NBQ1gsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vaW5kZXguanNcclxuLy/ojrflj5blupTnlKjlrp7kvotcclxuLy8gaW1wb3J0IHsgSU15QXBwIH0gZnJvbSAnLi4vLi4vYXBwJ1xyXG5pbXBvcnQgeyBXb3JkMk1wMyB9IGZyb20gJy4uLy4uL3V0aWxzL1dvcmQyTXAzJ1xyXG4vLyBpbXBvcnQgeyBzaG93RXJyb3JNc2cgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJ1xyXG5pbXBvcnQge1N0b3JhZ2VVdGlsfSBmcm9tICcuLi8uLi91dGlscy9TdG9yYWdlVXRpbCdcclxuaW1wb3J0IHtXb3JkR3JvdXB9IGZyb20gJy4uLy4uL2JlYW5zL1dvcmRHcm91cCdcclxuaW1wb3J0IHtXb3JkfSBmcm9tICcuLi8uLi9iZWFucy9Xb3JkJ1xyXG4vLyBpbXBvcnQge0luZGV4TGlzdH0gZnJvbSAnLi4vLi4vYmVhbi9JbmRleExpc3QnXHJcbmltcG9ydCB7QXVkaW9VdGlsfSBmcm9tICcuLi8uLi91dGlscy9BdWRpb1V0aWwnXHJcblxyXG4vLyBjb25zdCBhcHAgPSBnZXRBcHA8SU15QXBwPigpXHJcblxyXG5jb25zdCBhdWRpb1V0aWw6QXVkaW9VdGlsID0gbmV3IEF1ZGlvVXRpbCgpXHJcblxyXG4vKipcclxuICog5aOw5piO5LqG5LiA5Liq5p6a5Li+57G75Z6LXHJcbiAqIOeUqOadpeWMuuWIhumhtemdoueahOS4ieenjeeKtuaAge+8mlxyXG4gKiAxLuWBnOatoueKtuaAge+8jOWPquacieWBnOatoueKtuaAgeWPr+S7peWIh+aNouWNleivjeWIl+ihqOWSjOivlemfs1xyXG4gKiAyLuaSreaUvueKtuaAge+8jOaSreaUvueKtuaAgeWPquiDvemAieaLqeaaguWBnOWSjOWBnOatolxyXG4gKiAzLuaaguWBnOeKtuaAge+8jOaaguWBnOeKtuaAgeWPquiDvemAieaLqeaSreaUvuWSjOWBnOatolxyXG4gKi9cclxuZW51bSBTdGF0ZUVudW17XHJcbiAgU1RPUCxcclxuICBQTEFZLFxyXG4gIFBBVVNFXHJcbn1cclxuXHJcblBhZ2Uoe1xyXG4gIGRhdGE6IHtcclxuICAgIHN0YXRlOlN0YXRlRW51bSxcclxuICAgIGN1clN0YXRlOlN0YXRlRW51bS5TVE9QLFxyXG4gICAgZG93bmxvYWRDb3VudDowLFxyXG4gICAgcGxheUNvdW50OjAsXHJcbiAgICB3b3JkR3JvdXA6bmV3IFdvcmRHcm91cCgpLFxyXG4gICAgd29yZEdyb3VwTGlzdDpuZXcgQXJyYXkgPFdvcmRHcm91cD4oKSxcclxuICAgIHNob3dUb3BUaXBzOmZhbHNlLFxyXG4gICAgZXJyTXNnOicnXHJcbiAgfSxcclxuICBvbkxvYWQob3B0aW9uczphbnkpIHtcclxuICAgIGxldCBncm91cGlkOnN0cmluZyA9IG9wdGlvbnMuZ3JvdXBpZFxyXG4gICAgbGV0IHdvcmRHcm91cDogV29yZEdyb3VwID0gbmV3IFdvcmRHcm91cCgpXHJcbiAgICBsZXQgd29yZEdyb3VwTGlzdDogQXJyYXk8V29yZEdyb3VwPiA9IFN0b3JhZ2VVdGlsLmdldFdvcmRHcm91cCgpXHJcbiAgICAvL+ayoeacieWNleivjeWIhue7hOeahOaDheWGteS4i++8jOaYvuekuuWJjeW+gOWNleivjeeuoeeQhumhtemdoueahOaMiemSrlxyXG4gICAgaWYgKHdvcmRHcm91cExpc3QubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwi5rKh5pyJ5Y2V6K+N5YiG57uEXCIpXHJcbiAgICB9XHJcbiAgICAvL+m7mOiupOaYr+esrOS4gOS4quWNleivjeWIhue7hFxyXG4gICAgd29yZEdyb3VwID0gd29yZEdyb3VwTGlzdFswXVxyXG4gICAgLy/lpoLmnpzlj4LmlbDkuK3kvKDkuobljZXor43liIbnu4TnmoRJRO+8jOWImemAieaLqeWPguaVsOeahOWNleivjeWIhue7hFxyXG4gICAgZm9yKGxldCBpPTA7aTx3b3JkR3JvdXBMaXN0Lmxlbmd0aDtpKyspe1xyXG4gICAgICBpZih3b3JkR3JvdXBMaXN0W2ldLmdldElkKCk9PT1ncm91cGlkKXtcclxuICAgICAgICB3b3JkR3JvdXAgPSB3b3JkR3JvdXBMaXN0W2ldXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuc2V0RGF0YSEoe1xyXG4gICAgICB3b3JkR3JvdXA6IHdvcmRHcm91cCxcclxuICAgICAgd29yZEdyb3VwTGlzdDogd29yZEdyb3VwTGlzdFxyXG4gICAgfSlcclxuICB9LFxyXG4gIHRyYW5zbGF0ZVN0YXRlKHN0YXRlOlN0YXRlRW51bSl7XHJcbiAgICB0aGlzLnNldERhdGEhKHtcclxuICAgICAgY3VyU3RhdGU6c3RhdGVcclxuICAgIH0pXHJcbiAgfSxcclxuICBwbGF5KCl7XHJcbiAgICBpZiAodGhpcy5kYXRhLmN1clN0YXRlID09PSBTdGF0ZUVudW0uU1RPUCkge1xyXG5cclxuICAgICAgdHJ5IHtcclxuICAgICAgbGV0IG1wM0ZpbGVzOiBXb3JkMk1wMyA9IG5ldyBXb3JkMk1wMygpXHJcbiAgICAgIGxldCB0aGF0ID0gdGhpc1xyXG4gICAgICBsZXQgd29yZHM6IEFycmF5PFdvcmQ+ID0gdGhpcy5kYXRhLndvcmRHcm91cC5nZXRMaXN0KClcclxuICAgICAgdGhpcy50cmFuc2xhdGVTdGF0ZShTdGF0ZUVudW0uUExBWSlcclxuICAgICAgbXAzRmlsZXMuZ2V0RmlsZVBhdGhzKHdvcmRzLCAoY291bnQ6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIGxldCBjdXJOdW1iZXI6IG51bWJlciA9IE1hdGgucm91bmQoY291bnQgLyB3b3Jkcy5sZW5ndGggKiAxMDApXHJcbiAgICAgICAgdGhhdC5zZXREYXRhISh7XHJcbiAgICAgICAgICBkb3dubG9hZENvdW50OiBjdXJOdW1iZXJcclxuICAgICAgICB9KVxyXG4gICAgICB9KS50aGVuKChwYXRoczogc3RyaW5nW10pID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhwYXRoc1swXSlcclxuICAgICAgICB0aGF0LmF1ZGlvUmVhZHkocGF0aHMpXHJcbiAgICAgIH0pXHJcbiAgICB9Y2F0Y2goZSl7XHJcbiAgICAgIGxldCB0aGF0ID0gdGhpc1xyXG4gICAgICB0aGF0LnNldERhdGEhKHtcclxuICAgICAgICBzaG93VG9wVGlwczp0cnVlLFxyXG4gICAgICAgIGVyck1zZzplXHJcbiAgICAgIH0pXHJcbiAgICAgIHNldFRpbWVvdXQoKCk9PntcclxuICAgICAgICB0aGF0LnNldERhdGEhKHtcclxuICAgICAgICAgIHNob3dUb3BUaXBzOiBmYWxzZSxcclxuICAgICAgICAgIGVyck1zZzonJ1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH0sMzAwMClcclxuICAgIH1cclxuICAgIH1cclxuICAgIGlmKHRoaXMuZGF0YS5jdXJTdGF0ZT09PVN0YXRlRW51bS5QQVVTRSl7XHJcbiAgICAgIHRoaXMudHJhbnNsYXRlU3RhdGUoU3RhdGVFbnVtLlBMQVkpXHJcbiAgICAgIGF1ZGlvVXRpbC5wbGF5T3JQYXVzZSgpXHJcbiAgICB9XHJcbiAgfSxcclxuICBwYXVzZSgpe1xyXG4gICAgdGhpcy50cmFuc2xhdGVTdGF0ZShTdGF0ZUVudW0uUEFVU0UpXHJcbiAgICBhdWRpb1V0aWwucGxheU9yUGF1c2UoKVxyXG4gIH0sXHJcbiAgYXVkaW9SZWFkeShwYXRoczpzdHJpbmdbXSl7XHJcbiAgICBhdWRpb1V0aWwuc2V0UGF0aHMocGF0aHMpXHJcbiAgICBhdWRpb1V0aWwuc2V0UHJvY2Nlc3ModGhpcy5wbGF5UHJvY2Nlc3MpXHJcbiAgICBhdWRpb1V0aWwuc2V0RW5kKHRoaXMuZW5kKVxyXG4gICAgYXVkaW9VdGlsLnJlYWR5KClcclxuICAgIGF1ZGlvVXRpbC5wbGF5T3JQYXVzZSgpXHJcbiAgfSxcclxuICBwbGF5UHJvY2Nlc3MoY3VyOm51bWJlcil7XHJcbiAgICBsZXQgY3VyTnVtYmVyOiBudW1iZXIgPSBNYXRoLnJvdW5kKGN1ciAvIHRoaXMuZGF0YS53b3JkR3JvdXAuZ2V0TGlzdCgpLmxlbmd0aCAqIDEwMClcclxuICAgIHRoaXMuc2V0RGF0YSEoe1xyXG4gICAgICBwbGF5Q291bnQ6IGN1ck51bWJlclxyXG4gICAgfSlcclxuICB9LFxyXG4gIGVuZCgpe1xyXG4gICAgdGhpcy5zZXREYXRhISh7XHJcbiAgICAgIGN1clN0YXRlOlN0YXRlRW51bS5TVE9QLFxyXG4gICAgICBkb3dubG9hZENvdW50OjAsXHJcbiAgICAgIHBsYXlDb3VudDowLFxyXG4gICAgICBzaG93VG9wVGlwczogZmFsc2UsXHJcbiAgICAgIGVyck1zZzogJydcclxuICAgIH0pXHJcbiAgfVxyXG59KVxyXG4iXX0=