"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Word2Mp3_1 = require("../../utils/Word2Mp3");
const StorageUtil_1 = require("../../utils/StorageUtil");
const WordGroup_1 = require("../../beans/WordGroup");
const AudioUtil_1 = require("../../utils/AudioUtil");
const Params_1 = require("../../beans/Params");
let audioUtil = new AudioUtil_1.AudioUtil(StorageUtil_1.StorageUtil.getParams());
var StateEnum;
(function (StateEnum) {
    StateEnum[StateEnum["STOP"] = 0] = "STOP";
    StateEnum[StateEnum["PLAY"] = 1] = "PLAY";
    StateEnum[StateEnum["PAUSE"] = 2] = "PAUSE";
})(StateEnum || (StateEnum = {}));
Page({
    data: {
        state: StateEnum,
        curState: StateEnum.STOP,
        downloadCount: 0,
        playCount: 0,
        wordGroup: new WordGroup_1.WordGroup(),
        wordGroupList: new Array(),
        showTopTips: false,
        errMsg: '',
        params: new Params_1.Params(),
        mode: Params_1.Mode,
        pron: Params_1.Pronunciation
    },
    onLoad(options) {
        let groupid = options.groupid;
        let wordGroup = new WordGroup_1.WordGroup();
        let wordGroupList = StorageUtil_1.StorageUtil.getWordGroup();
        let params = StorageUtil_1.StorageUtil.getParams();
        if (wordGroupList.length === 0) {
            console.log("没有单词分组");
        }
        wordGroup = wordGroupList[0];
        for (let i = 0; i < wordGroupList.length; i++) {
            if (wordGroupList[i].getId() === groupid) {
                wordGroup = wordGroupList[i];
            }
        }
        this.setData({
            params: params,
            wordGroup: wordGroup,
            wordGroupList: wordGroupList
        });
    },
    translateState(state) {
        this.setData({
            curState: state
        });
    },
    play() {
        if (this.data.curState === StateEnum.STOP) {
            try {
                let mp3Files = new Word2Mp3_1.Word2Mp3(this.data.params);
                let that = this;
                let words = this.data.wordGroup.getList();
                this.translateState(StateEnum.PLAY);
                mp3Files.getFilePaths(words, (count) => {
                    let curNumber = Math.round(count / words.length * 100);
                    that.setData({
                        downloadCount: curNumber
                    });
                }).then((paths) => {
                    console.log(paths[0]);
                    that.audioReady(paths);
                });
            }
            catch (e) {
                let that = this;
                that.setData({
                    showTopTips: true,
                    errMsg: e
                });
                setTimeout(() => {
                    that.setData({
                        showTopTips: false,
                        errMsg: ''
                    });
                }, 3000);
            }
        }
        if (this.data.curState === StateEnum.PAUSE) {
            this.translateState(StateEnum.PLAY);
            audioUtil.playOrPause();
        }
    },
    pause() {
        this.translateState(StateEnum.PAUSE);
        audioUtil.playOrPause();
    },
    audioReady(paths) {
        audioUtil.updateParams(StorageUtil_1.StorageUtil.getParams());
        audioUtil.setPaths(paths);
        audioUtil.setProccess(this.playProccess);
        audioUtil.setEnd(this.end);
        audioUtil.ready();
        audioUtil.playOrPause();
    },
    playProccess(cur) {
        let curNumber = Math.round(cur / this.data.wordGroup.getList().length * 100);
        this.setData({
            playCount: curNumber
        });
    },
    end() {
        this.setData({
            curState: StateEnum.STOP,
            downloadCount: 0,
            playCount: 0,
            showTopTips: false,
            errMsg: ''
        });
    }
});
//# sourceMappingURL=data:application/json;base64,