"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Params_1 = require("../../beans/Params");
const StorageUtil_1 = require("../../utils/StorageUtil");
Page({
    data: {
        params: new Params_1.Params(),
        modeChecked: false,
        pronChecked: false
    },
    onLoad() {
    },
    onShow() {
        let params = StorageUtil_1.StorageUtil.getParams();
        let modeChecked = false;
        let pronChecked = false;
        if (params.getMode() === Params_1.Mode.RANDOM) {
            modeChecked = true;
        }
        if (params.getPron() === Params_1.Pronunciation.AMERICAN) {
            pronChecked = true;
        }
        this.setData({
            params: params,
            modeChecked: modeChecked,
            pronChecked: pronChecked
        });
    },
    flushParams() {
        StorageUtil_1.StorageUtil.setParams(this.data.params);
    },
    speedChange(e) {
        let speed = e.detail.value;
        let params = this.data.params;
        params.setSpeed(speed);
        this.setData({
            params: params
        });
        this.flushParams();
    },
    repeatChange(e) {
        let repeat = e.detail.value;
        let params = this.data.params;
        params.setRepeat(repeat);
        this.setData({
            params: params
        });
        this.flushParams();
    },
    intervalChange(e) {
        let interval = e.detail.value;
        let params = this.data.params;
        params.setInterval(interval);
        this.setData({
            params: params
        });
        this.flushParams();
    },
    pauseChange(e) {
        let pause = e.detail.value;
        let params = this.data.params;
        params.setPause(pause);
        this.setData({
            params: params
        });
        this.flushParams();
    },
    modeChange() {
        let params = this.data.params;
        let modeChecked = !this.data.modeChecked;
        if (params.getMode() === Params_1.Mode.RANDOM) {
            params.setMode(Params_1.Mode.ORDER);
        }
        else if (params.getMode() === Params_1.Mode.ORDER) {
            params.setMode(Params_1.Mode.RANDOM);
        }
        this.setData({
            params: params,
            modeChecked: modeChecked
        });
        this.flushParams();
    },
    pronChange() {
        let params = this.data.params;
        let pronChecked = !this.data.pronChecked;
        if (params.getPron() === Params_1.Pronunciation.AMERICAN) {
            params.setPron(Params_1.Pronunciation.BRITISH);
        }
        else if (params.getPron() === Params_1.Pronunciation.BRITISH) {
            params.setPron(Params_1.Pronunciation.AMERICAN);
        }
        this.setData({
            params: params,
            pronChecked: pronChecked
        });
        this.flushParams();
    },
    question_1() {
        wx.navigateTo({
            url: '../found/found',
        });
    },
    question_2() {
        wx.navigateTo({
            url: '../test/test',
        });
    },
    question_3() {
        wx.navigateTo({
            url: '../warn/warn',
        });
    },
    question_4() {
        wx.navigateTo({
            url: '../open/open',
        });
    },
    onShareAppMessage: function () {
        return {
            title: '曾经也讨厌过英语课上听写单词',
            path: '/pages/setting/setting',
            imageUrl: "http://img1.ph.126.net/gtigWEVlA6XbXE9aFrB0ew==/2098114476501923011.jpg"
        };
    }
});
//# sourceMappingURL=data:application/json;base64,