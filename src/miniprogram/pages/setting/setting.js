"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Params_1 = require("../../beans/Params");
const StorageUtil_1 = require("../../utils/StorageUtil");
Page({
    data: {
        params: new Params_1.Params(),
        modeChecked: false,
        pronChecked: false
    },
    onLoad() {
        let params = StorageUtil_1.StorageUtil.getParams();
        let modeChecked = false;
        let pronChecked = false;
        if (params.getMode() === Params_1.Mode.RANDOM) {
            modeChecked = true;
        }
        if (params.getPron() === Params_1.Pronunciation.AMERICAN) {
            pronChecked = true;
        }
        this.setData({
            params: params,
            modeChecked: modeChecked,
            pronChecked: pronChecked
        });
    },
    flushParams() {
        StorageUtil_1.StorageUtil.setParams(this.data.params);
    },
    modeChange() {
        let params = this.data.params;
        let modeChecked = !this.data.modeChecked;
        if (params.getMode() === Params_1.Mode.RANDOM) {
            params.setMode(Params_1.Mode.ORDER);
        }
        else if (params.getMode() === Params_1.Mode.ORDER) {
            params.setMode(Params_1.Mode.RANDOM);
        }
        this.setData({
            params: params,
            modeChecked: modeChecked
        });
        this.flushParams();
    },
    pronChange() {
        let params = this.data.params;
        let pronChecked = !this.data.pronChecked;
        if (params.getPron() === Params_1.Pronunciation.AMERICAN) {
            params.setPron(Params_1.Pronunciation.BRITISH);
        }
        else if (params.getPron() === Params_1.Pronunciation.BRITISH) {
            params.setPron(Params_1.Pronunciation.AMERICAN);
        }
        this.setData({
            params: params,
            pronChecked: pronChecked
        });
        this.flushParams();
    },
    question_1() {
        wx.navigateTo({
            url: '../found/found',
        });
    },
    question_2() {
        wx.navigateTo({
            url: '../test/test',
        });
    },
    question_3() {
        wx.navigateTo({
            url: '../warn/warn',
        });
    },
    question_4() {
        wx.navigateTo({
            url: '../open/open',
        });
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNldHRpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwrQ0FBZ0U7QUFDaEUseURBQXFEO0FBRXJELElBQUksQ0FBQztJQUNILElBQUksRUFBRTtRQUNKLE1BQU0sRUFBRSxJQUFJLGVBQU0sRUFBRTtRQUNwQixXQUFXLEVBQUMsS0FBSztRQUNqQixXQUFXLEVBQUMsS0FBSztLQUNsQjtJQUNELE1BQU07UUFDSixJQUFJLE1BQU0sR0FBVyx5QkFBVyxDQUFDLFNBQVMsRUFBRSxDQUFBO1FBQzVDLElBQUksV0FBVyxHQUFXLEtBQUssQ0FBQTtRQUMvQixJQUFJLFdBQVcsR0FBVyxLQUFLLENBQUE7UUFDL0IsSUFBRyxNQUFNLENBQUMsT0FBTyxFQUFFLEtBQUcsYUFBSSxDQUFDLE1BQU0sRUFBQztZQUNoQyxXQUFXLEdBQUcsSUFBSSxDQUFBO1NBQ25CO1FBQ0QsSUFBRyxNQUFNLENBQUMsT0FBTyxFQUFFLEtBQUcsc0JBQWEsQ0FBQyxRQUFRLEVBQUM7WUFDM0MsV0FBVyxHQUFHLElBQUksQ0FBQTtTQUNuQjtRQUNELElBQUksQ0FBQyxPQUFRLENBQUM7WUFDWixNQUFNLEVBQUMsTUFBTTtZQUNiLFdBQVcsRUFBQyxXQUFXO1lBQ3ZCLFdBQVcsRUFBQyxXQUFXO1NBQ3hCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxXQUFXO1FBQ1QseUJBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN6QyxDQUFDO0lBQ0QsVUFBVTtRQUNSLElBQUksTUFBTSxHQUFXLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFBO1FBQ3JDLElBQUksV0FBVyxHQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUE7UUFDaEQsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFLEtBQUssYUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNwQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUMzQjthQUFLLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLGFBQUksQ0FBQyxLQUFLLEVBQUU7WUFDekMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7U0FDNUI7UUFDRCxJQUFJLENBQUMsT0FBUSxDQUFDO1lBQ1osTUFBTSxFQUFDLE1BQU07WUFDYixXQUFXLEVBQUMsV0FBVztTQUN4QixDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDcEIsQ0FBQztJQUNELFVBQVU7UUFDUixJQUFJLE1BQU0sR0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQTtRQUNyQyxJQUFJLFdBQVcsR0FBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFBO1FBQ2pELElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLHNCQUFhLENBQUMsUUFBUSxFQUFFO1lBQy9DLE1BQU0sQ0FBQyxPQUFPLENBQUMsc0JBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtTQUN0QzthQUFNLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLHNCQUFhLENBQUMsT0FBTyxFQUFFO1lBQ3JELE1BQU0sQ0FBQyxPQUFPLENBQUMsc0JBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtTQUN2QztRQUNELElBQUksQ0FBQyxPQUFRLENBQUM7WUFDWixNQUFNLEVBQUUsTUFBTTtZQUNkLFdBQVcsRUFBRSxXQUFXO1NBQ3pCLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUNwQixDQUFDO0lBQ0QsVUFBVTtRQUNSLEVBQUUsQ0FBQyxVQUFVLENBQUM7WUFDWixHQUFHLEVBQUUsZ0JBQWdCO1NBQ3RCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxVQUFVO1FBQ1IsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLEdBQUcsRUFBRSxjQUFjO1NBQ3BCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxVQUFVO1FBQ1IsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLEdBQUcsRUFBRSxjQUFjO1NBQ3BCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDRCxVQUFVO1FBQ1IsRUFBRSxDQUFDLFVBQVUsQ0FBQztZQUNaLEdBQUcsRUFBRSxjQUFjO1NBQ3BCLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgUGFyYW1zLCBNb2RlLCBQcm9udW5jaWF0aW9uIH0gZnJvbSAnLi4vLi4vYmVhbnMvUGFyYW1zJ1xyXG5pbXBvcnQgeyBTdG9yYWdlVXRpbCB9IGZyb20gJy4uLy4uL3V0aWxzL1N0b3JhZ2VVdGlsJ1xyXG5cclxuUGFnZSh7XHJcbiAgZGF0YToge1xyXG4gICAgcGFyYW1zOiBuZXcgUGFyYW1zKCksXHJcbiAgICBtb2RlQ2hlY2tlZDpmYWxzZSxcclxuICAgIHByb25DaGVja2VkOmZhbHNlXHJcbiAgfSxcclxuICBvbkxvYWQoKSB7XHJcbiAgICBsZXQgcGFyYW1zOiBQYXJhbXMgPSBTdG9yYWdlVXRpbC5nZXRQYXJhbXMoKVxyXG4gICAgbGV0IG1vZGVDaGVja2VkOmJvb2xlYW4gPSBmYWxzZVxyXG4gICAgbGV0IHByb25DaGVja2VkOmJvb2xlYW4gPSBmYWxzZVxyXG4gICAgaWYocGFyYW1zLmdldE1vZGUoKT09PU1vZGUuUkFORE9NKXtcclxuICAgICAgbW9kZUNoZWNrZWQgPSB0cnVlXHJcbiAgICB9XHJcbiAgICBpZihwYXJhbXMuZ2V0UHJvbigpPT09UHJvbnVuY2lhdGlvbi5BTUVSSUNBTil7XHJcbiAgICAgIHByb25DaGVja2VkID0gdHJ1ZVxyXG4gICAgfVxyXG4gICAgdGhpcy5zZXREYXRhISh7XHJcbiAgICAgIHBhcmFtczpwYXJhbXMsXHJcbiAgICAgIG1vZGVDaGVja2VkOm1vZGVDaGVja2VkLFxyXG4gICAgICBwcm9uQ2hlY2tlZDpwcm9uQ2hlY2tlZFxyXG4gICAgfSlcclxuICB9LFxyXG4gIGZsdXNoUGFyYW1zKCl7XHJcbiAgICBTdG9yYWdlVXRpbC5zZXRQYXJhbXModGhpcy5kYXRhLnBhcmFtcylcclxuICB9LFxyXG4gIG1vZGVDaGFuZ2UoKSB7XHJcbiAgICBsZXQgcGFyYW1zOiBQYXJhbXMgPSB0aGlzLmRhdGEucGFyYW1zXHJcbiAgICBsZXQgbW9kZUNoZWNrZWQ6Ym9vbGVhbiA9ICF0aGlzLmRhdGEubW9kZUNoZWNrZWRcclxuICAgIGlmIChwYXJhbXMuZ2V0TW9kZSgpID09PSBNb2RlLlJBTkRPTSkge1xyXG4gICAgICBwYXJhbXMuc2V0TW9kZShNb2RlLk9SREVSKVxyXG4gICAgfWVsc2UgaWYgKHBhcmFtcy5nZXRNb2RlKCkgPT09IE1vZGUuT1JERVIpIHtcclxuICAgICAgcGFyYW1zLnNldE1vZGUoTW9kZS5SQU5ET00pXHJcbiAgICB9XHJcbiAgICB0aGlzLnNldERhdGEhKHtcclxuICAgICAgcGFyYW1zOnBhcmFtcyxcclxuICAgICAgbW9kZUNoZWNrZWQ6bW9kZUNoZWNrZWRcclxuICAgIH0pXHJcbiAgICB0aGlzLmZsdXNoUGFyYW1zKClcclxuICB9LFxyXG4gIHByb25DaGFuZ2UoKXtcclxuICAgIGxldCBwYXJhbXM6IFBhcmFtcyA9IHRoaXMuZGF0YS5wYXJhbXNcclxuICAgIGxldCBwcm9uQ2hlY2tlZDogYm9vbGVhbiA9ICF0aGlzLmRhdGEucHJvbkNoZWNrZWRcclxuICAgIGlmIChwYXJhbXMuZ2V0UHJvbigpID09PSBQcm9udW5jaWF0aW9uLkFNRVJJQ0FOKSB7XHJcbiAgICAgIHBhcmFtcy5zZXRQcm9uKFByb251bmNpYXRpb24uQlJJVElTSClcclxuICAgIH0gZWxzZSBpZiAocGFyYW1zLmdldFByb24oKSA9PT0gUHJvbnVuY2lhdGlvbi5CUklUSVNIKSB7XHJcbiAgICAgIHBhcmFtcy5zZXRQcm9uKFByb251bmNpYXRpb24uQU1FUklDQU4pXHJcbiAgICB9XHJcbiAgICB0aGlzLnNldERhdGEhKHtcclxuICAgICAgcGFyYW1zOiBwYXJhbXMsXHJcbiAgICAgIHByb25DaGVja2VkOiBwcm9uQ2hlY2tlZFxyXG4gICAgfSlcclxuICAgIHRoaXMuZmx1c2hQYXJhbXMoKVxyXG4gIH0sXHJcbiAgcXVlc3Rpb25fMSgpe1xyXG4gICAgd3gubmF2aWdhdGVUbyh7XHJcbiAgICAgIHVybDogJy4uL2ZvdW5kL2ZvdW5kJyxcclxuICAgIH0pXHJcbiAgfSxcclxuICBxdWVzdGlvbl8yKCkge1xyXG4gICAgd3gubmF2aWdhdGVUbyh7XHJcbiAgICAgIHVybDogJy4uL3Rlc3QvdGVzdCcsXHJcbiAgICB9KVxyXG4gIH0sXHJcbiAgcXVlc3Rpb25fMygpIHtcclxuICAgIHd4Lm5hdmlnYXRlVG8oe1xyXG4gICAgICB1cmw6ICcuLi93YXJuL3dhcm4nLFxyXG4gICAgfSlcclxuICB9LFxyXG4gIHF1ZXN0aW9uXzQoKSB7XHJcbiAgICB3eC5uYXZpZ2F0ZVRvKHtcclxuICAgICAgdXJsOiAnLi4vb3Blbi9vcGVuJyxcclxuICAgIH0pXHJcbiAgfVxyXG59KSJdfQ==