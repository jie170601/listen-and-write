"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var StorageUtil_1 = require("../../utils/StorageUtil");
var WordGroup_1 = require("../../beans/WordGroup");
var papaparse_1 = require("../../utils/papaparse");
var StateEnum;
(function (StateEnum) {
    StateEnum[StateEnum["WORD_UNFOLD_STATE"] = 0] = "WORD_UNFOLD_STATE";
    StateEnum[StateEnum["WORD_FOLD_STATE"] = 1] = "WORD_FOLD_STATE";
    StateEnum[StateEnum["ADD_GROUP_STATE"] = 2] = "ADD_GROUP_STATE";
    StateEnum[StateEnum["ADD_WORD_STATE"] = 3] = "ADD_WORD_STATE";
    StateEnum[StateEnum["BATCH_ADD_STATE"] = 4] = "BATCH_ADD_STATE";
})(StateEnum || (StateEnum = {}));
Page({
    data: {
        addWord: '',
        groupid: '',
        addGroupName: '',
        State: StateEnum,
        textAreaCount: 0,
        textAreaValue: '',
        wordGroupList: new Array(),
        curState: StateEnum.WORD_UNFOLD_STATE,
        preState: StateEnum.WORD_UNFOLD_STATE
    },
    onLoad: function () {
        this.flushPageData();
    },
    onShow: function () {
        this.flushPageData();
    },
    translateStateTo: function (nextState) {
        var preData = this.data.curState;
        this.setData({
            curState: nextState,
            preData: preData
        });
    },
    flushPageData: function () {
        var wordGroupList = StorageUtil_1.StorageUtil.getWordGroup();
        this.setData({
            wordGroupList: wordGroupList
        });
    },
    toAddGroup: function () {
        this.translateStateTo(StateEnum.ADD_GROUP_STATE);
    },
    saveAddGroup: function () {
        var wordGroup = new WordGroup_1.WordGroup();
        wordGroup.setCount(0);
        wordGroup.setName(this.data.addGroupName);
        StorageUtil_1.StorageUtil.addWordGroup(wordGroup);
        this.translateStateTo(StateEnum.WORD_UNFOLD_STATE);
        this.setData({
            addGroupName: ''
        });
        this.flushPageData();
    },
    cancelAddGroup: function () {
        this.translateStateTo(StateEnum.WORD_UNFOLD_STATE);
    },
    addGroupNameChanged: function (e) {
        this.setData({
            addGroupName: e.detail.value
        });
    },
    foldWordGroup: function (e) {
        var tapid = e.currentTarget.id;
        var groupid = this.data.groupid;
        if (groupid === tapid) {
            groupid = "";
            this.translateStateTo(StateEnum.WORD_UNFOLD_STATE);
        }
        else {
            groupid = tapid;
            this.translateStateTo(StateEnum.WORD_FOLD_STATE);
        }
        this.setData({
            groupid: groupid
        });
    },
    toAddWord: function () {
        this.translateStateTo(StateEnum.ADD_WORD_STATE);
    },
    addWordChanged: function (e) {
        this.setData({
            addWord: e.detail.value,
            groupid: e.currentTarget.id
        });
    },
    saveAddWord: function () {
        var wordGroup = new WordGroup_1.WordGroup();
        var word = this.data.addWord;
        wordGroup.setId(this.data.groupid);
        StorageUtil_1.StorageUtil.addWord(wordGroup, word);
        this.translateStateTo(StateEnum.WORD_FOLD_STATE);
        this.setData({
            addWord: ''
        });
        this.flushPageData();
    },
    cancelAddWord: function () {
        this.translateStateTo(StateEnum.WORD_FOLD_STATE);
        this.setData({
            addWord: ''
        });
    },
    toAddWords: function () {
        this.translateStateTo(StateEnum.BATCH_ADD_STATE);
    },
    textAreaInput: function (e) {
        this.setData({
            textAreaValue: e.detail.value,
            textAreaCount: e.detail.value.length
        });
    },
    saveAddWords: function () {
        var words = this.data.textAreaValue;
        var wordList = papaparse_1.parse(words).data;
        var wordGroup = new WordGroup_1.WordGroup();
        wordGroup.setId(this.data.groupid);
        for (var i = 0; i < wordList.length; i++) {
            for (var j = 0; j < wordList[i].length; j++) {
                var word = wordList[i][j];
                StorageUtil_1.StorageUtil.addWord(wordGroup, word);
            }
        }
        this.translateStateTo(StateEnum.WORD_FOLD_STATE);
        this.setData({
            textAreaCount: 0,
            textAreaValue: ''
        });
        this.flushPageData();
    },
    cancelAddWords: function () {
        this.translateStateTo(StateEnum.WORD_FOLD_STATE);
        this.setData({
            textAreaCount: 0,
            textAreaValue: ''
        });
    },
    toDeleteWordGroup: function () {
        wx.navigateTo({
            url: '../delete/delete'
        });
    },
    toDeleteWord: function () {
        var that = this;
        wx.navigateTo({
            url: '../delete/delete?groupid=' + that.data.groupid
        });
    },
    listen: function () {
        var that = this;
        wx.navigateTo({
            url: '../listen/listen?groupid=' + that.data.groupid
        });
        return false;
    },
    mean: function (e) {
        var word = e.currentTarget.id;
        var groupid = this.data.groupid;
        wx.navigateTo({
            url: '../mean/mean?groupid=' + groupid + '&word=' + word
        });
    },
    onShareAppMessage: function () {
        return {
            title: '每一次听写，为了离梦想更近',
            path: '/pages/index/index',
            imageUrl: "http://img1.ph.126.net/gtigWEVlA6XbXE9aFrB0ew==/2098114476501923011.jpg"
        };
    }
});
//# sourceMappingURL=data:application/json;base64,