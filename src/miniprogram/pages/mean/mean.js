"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WordGroup_1 = require("../../beans/WordGroup");
const StorageUtil_1 = require("../../utils/StorageUtil");
let key = '0';
Page({
    data: {
        word_name: "",
        ph_en: "",
        ph_am: "",
        index: 0,
        parts: [],
        wordList: new Array()
    },
    onLoad(options) {
        let groupid = options.groupid;
        let word = options.word;
        let wordGroup = this.getWordGroupById(groupid);
        let wordList = wordGroup.getList();
        let index = this.getIndex(word, wordList);
        this.setData({
            index: index,
            wordList: wordList
        });
        this.flushPage(word);
    },
    flushPage: function (word) {
        let content = this;
        wx.request({
            url: 'https://dict-co.iciba.com/api/dictionary.php?type=json&w=' + word + '&key=' + key,
            success: function (res) {
                let data = res.data;
                let word_name = data.word_name;
                let ph_en = data.symbols[0].ph_en;
                let ph_am = data.symbols[0].ph_am;
                let parts = new Array();
                for (let i = 0; i < data.symbols[0].parts.length; i++) {
                    let part = data.symbols[0].parts[i].part;
                    let mean = '';
                    for (let j = 0; j < data.symbols[0].parts[i].means.length; j++) {
                        mean += data.symbols[0].parts[i].means[j] + 'ï¼›';
                    }
                    parts.push({
                        part: part,
                        mean: mean
                    });
                }
                content.setData({
                    word_name: word_name,
                    ph_en: ph_en,
                    ph_am: ph_am,
                    parts: parts
                });
            }
        });
    },
    getWordGroupById(id) {
        let wordGroupList = StorageUtil_1.StorageUtil.getWordGroup();
        for (let i = 0; i < wordGroupList.length; i++) {
            if (wordGroupList[i].getId() === id) {
                return wordGroupList[i];
            }
        }
        return new WordGroup_1.WordGroup();
    },
    getIndex(word, wordList) {
        for (let i = 0; i < wordList.length; i++) {
            if (word === wordList[i]) {
                return i;
            }
        }
        return 0;
    },
    next() {
        let wordList = this.data.wordList;
        let index = this.data.index + 1;
        if (index === wordList.length) {
            index = 0;
        }
        this.setData({
            index: index
        });
        this.flushPage(wordList[index]);
    }
});
//# sourceMappingURL=data:application/json;base64,