"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var WordGroup_1 = require("../../beans/WordGroup");
var StorageUtil_1 = require("../../utils/StorageUtil");
var key = '0';
Page({
    data: {
        word_name: "",
        ph_en: "",
        ph_am: "",
        index: 0,
        parts: [],
        wordList: new Array()
    },
    onLoad: function (options) {
        var groupid = options.groupid;
        var word = options.word;
        var wordGroup = this.getWordGroupById(groupid);
        var wordList = wordGroup.getList();
        var index = this.getIndex(word, wordList);
        this.setData({
            index: index,
            wordList: wordList
        });
        this.flushPage(word);
    },
    flushPage: function (word) {
        var content = this;
        wx.request({
            url: 'https://dict-co.iciba.com/api/dictionary.php?type=json&w=' + word + '&key=' + key,
            success: function (res) {
                var data = res.data;
                var word_name = data.word_name;
                var ph_en = data.symbols[0].ph_en;
                var ph_am = data.symbols[0].ph_am;
                var parts = new Array();
                for (var i = 0; i < data.symbols[0].parts.length; i++) {
                    var part = data.symbols[0].parts[i].part;
                    var mean = '';
                    for (var j = 0; j < data.symbols[0].parts[i].means.length; j++) {
                        mean += data.symbols[0].parts[i].means[j] + 'ï¼›';
                    }
                    parts.push({
                        part: part,
                        mean: mean
                    });
                }
                content.setData({
                    word_name: word_name,
                    ph_en: ph_en,
                    ph_am: ph_am,
                    parts: parts
                });
            }
        });
    },
    getWordGroupById: function (id) {
        var wordGroupList = StorageUtil_1.StorageUtil.getWordGroup();
        for (var i = 0; i < wordGroupList.length; i++) {
            if (wordGroupList[i].getId() === id) {
                return wordGroupList[i];
            }
        }
        return new WordGroup_1.WordGroup();
    },
    getIndex: function (word, wordList) {
        for (var i = 0; i < wordList.length; i++) {
            if (word === wordList[i]) {
                return i;
            }
        }
        return 0;
    },
    next: function () {
        var wordList = this.data.wordList;
        var index = this.data.index + 1;
        if (index === wordList.length) {
            index = 0;
        }
        this.setData({
            index: index
        });
        this.flushPage(wordList[index]);
    }
});
//# sourceMappingURL=data:application/json;base64,