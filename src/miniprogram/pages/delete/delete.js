"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const StorageUtil_1 = require("../../utils/StorageUtil");
const WordGroup_1 = require("../../beans/WordGroup");
var State;
(function (State) {
    State[State["DELETE_GROUP"] = 0] = "DELETE_GROUP";
    State[State["DELETE_WORD"] = 1] = "DELETE_WORD";
})(State || (State = {}));
Page({
    data: {
        groupid: '',
        curState: State.DELETE_GROUP,
        preState: State.DELETE_GROUP,
        State: State,
        wordGroupList: new Array(),
        wordList: new Array(),
        deleteGroupList: new Array(),
        deleteWordList: new Array()
    },
    onLoad(options) {
        let groupid = options.groupid;
        if (typeof (groupid) === 'undefined' || groupid === '') {
            this.translateStateTo(State.DELETE_GROUP);
        }
        else {
            this.setData({
                groupid: groupid
            });
            this.translateStateTo(State.DELETE_WORD);
        }
        this.flushPageData();
    },
    cancel() {
        wx.navigateBack({
            delta: 1
        });
    },
    translateStateTo(nextState) {
        let preState = this.data.curState;
        this.setData({
            curState: nextState,
            preState: preState
        });
    },
    flushPageData() {
        let wordGroupList = StorageUtil_1.StorageUtil.getWordGroup();
        let wordList = new Array();
        if (this.data.curState === State.DELETE_WORD) {
            for (let i = 0; i < wordGroupList.length; i++) {
                if (wordGroupList[i].getId() === this.data.groupid) {
                    wordList = wordGroupList[i].getList();
                }
            }
        }
        this.setData({
            wordGroupList: wordGroupList,
            wordList: wordList
        });
    },
    groupSelectChange(e) {
        let deleteGroupList = new Array();
        let groupids = e.detail.value;
        for (let i = 0; i < groupids.length; i++) {
            let wordGroup = new WordGroup_1.WordGroup();
            wordGroup.setId(groupids[i]);
            deleteGroupList.push(wordGroup);
        }
        this.setData({
            deleteGroupList: deleteGroupList
        });
    },
    wordSelectChange(e) {
        let deleteWordList = new Array();
        let words = e.detail.value;
        for (let i = 0; i < words.length; i++) {
            let word = words[i];
            deleteWordList.push(word);
        }
        this.setData({
            deleteWordList: deleteWordList
        });
    },
    deleteGroup() {
        let that = this;
        wx.showModal({
            title: '提示',
            content: '确定删除所选分组吗',
            success(res) {
                if (res.confirm) {
                    let deleteGroupList = that.data.deleteGroupList;
                    for (let i = 0; i < deleteGroupList.length; i++) {
                        StorageUtil_1.StorageUtil.deleteWordGroup(deleteGroupList[i]);
                    }
                    that.cancel();
                }
            }
        });
    },
    deleteWord() {
        let that = this;
        wx.showModal({
            title: '提示',
            content: '确定删除所选单词吗',
            success(res) {
                if (res.confirm) {
                    let wordGroup = new WordGroup_1.WordGroup();
                    let deleteWordList = that.data.deleteWordList;
                    wordGroup.setId(that.data.groupid);
                    for (let i = 0; i < deleteWordList.length; i++) {
                        StorageUtil_1.StorageUtil.deleteWord(wordGroup, deleteWordList[i]);
                    }
                    that.cancel();
                }
            }
        });
    }
});
//# sourceMappingURL=data:application/json;base64,