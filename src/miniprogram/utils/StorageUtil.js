"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WordGroup_1 = require("../beans/WordGroup");
const Params_1 = require("../beans/Params");
class StorageUtil {
    static addWordGroup(wordGroup) {
        let wordGroupList = this.getWordGroup();
        wordGroupList.unshift(wordGroup);
        this.saveWordGroupList(wordGroupList);
    }
    static getWordGroup() {
        let wordGroupList = wx.getStorageSync('wordGroupList');
        if (!wordGroupList) {
            return new Array();
        }
        let list = new Array();
        for (let i = 0; i < wordGroupList.length; i++) {
            let wordGroup = new WordGroup_1.WordGroup();
            wordGroup.setCount(wordGroupList[i].count);
            wordGroup.setId(wordGroupList[i].id);
            wordGroup.setName(wordGroupList[i].name);
            wordGroup.setList(wordGroupList[i].list);
            list.push(wordGroup);
        }
        return list;
    }
    static deleteWordGroup(wordGroup) {
        let wordGroupList = this.getWordGroup();
        let groupListTemp = new Array();
        for (let i = 0; i < wordGroupList.length; i++) {
            if (wordGroupList[i].getId() !== wordGroup.getId()) {
                groupListTemp.push(wordGroupList[i]);
            }
        }
        this.saveWordGroupList(groupListTemp);
    }
    static addWord(wordGroup, word) {
        let wordGroupList = this.getWordGroup();
        for (let i = 0; i < wordGroupList.length; i++) {
            if (wordGroupList[i].getId() === wordGroup.getId()) {
                let wordList = wordGroupList[i].getList();
                wordList.unshift(word);
                wordGroupList[i].setList(wordList);
                wordGroupList[i].setCount(wordList.length);
                this.saveWordGroupList(wordGroupList);
                return;
            }
        }
    }
    static deleteWord(wordGroup, word) {
        let wordGroupList = this.getWordGroup();
        for (let i = 0; i < wordGroupList.length; i++) {
            if (wordGroupList[i].getId() === wordGroup.getId()) {
                let wordList = wordGroupList[i].getList();
                let wordListTemp = new Array();
                for (let j = 0; j < wordList.length; j++) {
                    if (wordList[j] !== word) {
                        wordListTemp.push(wordList[j]);
                    }
                }
                wordGroupList[i].setList(wordListTemp);
                wordGroupList[i].setCount(wordListTemp.length);
                this.saveWordGroupList(wordGroupList);
                return;
            }
        }
    }
    static saveWordGroupList(wordGroupList) {
        wx.setStorageSync('wordGroupList', wordGroupList);
    }
    static setParams(params) {
        wx.setStorageSync("params", params);
    }
    static getParams() {
        let paramsObject = wx.getStorageSync("params");
        let params = new Params_1.Params();
        if (typeof paramsObject === 'object') {
            params.setSpeed(paramsObject.speed);
            params.setRepeat(paramsObject.repeat);
            params.setInterval(paramsObject.interval);
            params.setPause(paramsObject.pause);
            if (paramsObject.mode === 0) {
                params.setMode(Params_1.Mode.RANDOM);
            }
            if (paramsObject.mode === 1) {
                params.setMode(Params_1.Mode.ORDER);
            }
            if (paramsObject.pron === 0) {
                params.setPron(Params_1.Pronunciation.BRITISH);
            }
            if (paramsObject.pron === 1) {
                params.setPron(Params_1.Pronunciation.AMERICAN);
            }
        }
        return params;
    }
}
exports.StorageUtil = StorageUtil;
//# sourceMappingURL=data:application/json;base64,