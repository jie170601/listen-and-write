"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var WordGroup_1 = require("../beans/WordGroup");
var Params_1 = require("../beans/Params");
var StorageUtil = (function () {
    function StorageUtil() {
    }
    StorageUtil.addWordGroup = function (wordGroup) {
        var wordGroupList = this.getWordGroup();
        wordGroupList.unshift(wordGroup);
        this.saveWordGroupList(wordGroupList);
    };
    StorageUtil.getWordGroup = function () {
        var wordGroupList = wx.getStorageSync('wordGroupList');
        if (!wordGroupList) {
            return new Array();
        }
        var list = new Array();
        for (var i = 0; i < wordGroupList.length; i++) {
            var wordGroup = new WordGroup_1.WordGroup();
            wordGroup.setCount(wordGroupList[i].count);
            wordGroup.setId(wordGroupList[i].id);
            wordGroup.setName(wordGroupList[i].name);
            wordGroup.setList(wordGroupList[i].list);
            list.push(wordGroup);
        }
        return list;
    };
    StorageUtil.deleteWordGroup = function (wordGroup) {
        var wordGroupList = this.getWordGroup();
        var groupListTemp = new Array();
        for (var i = 0; i < wordGroupList.length; i++) {
            if (wordGroupList[i].getId() !== wordGroup.getId()) {
                groupListTemp.push(wordGroupList[i]);
            }
        }
        this.saveWordGroupList(groupListTemp);
    };
    StorageUtil.addWord = function (wordGroup, word) {
        var wordGroupList = this.getWordGroup();
        for (var i = 0; i < wordGroupList.length; i++) {
            if (wordGroupList[i].getId() === wordGroup.getId()) {
                var wordList = wordGroupList[i].getList();
                wordList.unshift(word);
                wordGroupList[i].setList(wordList);
                wordGroupList[i].setCount(wordList.length);
                this.saveWordGroupList(wordGroupList);
                return;
            }
        }
    };
    StorageUtil.deleteWord = function (wordGroup, word) {
        var wordGroupList = this.getWordGroup();
        for (var i = 0; i < wordGroupList.length; i++) {
            if (wordGroupList[i].getId() === wordGroup.getId()) {
                var wordList = wordGroupList[i].getList();
                var wordListTemp = new Array();
                for (var j = 0; j < wordList.length; j++) {
                    if (wordList[j] !== word) {
                        wordListTemp.push(wordList[j]);
                    }
                }
                wordGroupList[i].setList(wordListTemp);
                wordGroupList[i].setCount(wordListTemp.length);
                this.saveWordGroupList(wordGroupList);
                return;
            }
        }
    };
    StorageUtil.saveWordGroupList = function (wordGroupList) {
        wx.setStorageSync('wordGroupList', wordGroupList);
    };
    StorageUtil.setParams = function (params) {
        wx.setStorageSync("params", params);
    };
    StorageUtil.getParams = function () {
        var paramsObject = wx.getStorageSync("params");
        var params = new Params_1.Params();
        if (typeof paramsObject === 'object') {
            params.setSpeed(paramsObject.speed);
            params.setRepeat(paramsObject.repeat);
            params.setInterval(paramsObject.interval);
            params.setPause(paramsObject.pause);
            if (paramsObject.mode === 0) {
                params.setMode(Params_1.Mode.RANDOM);
            }
            if (paramsObject.mode === 1) {
                params.setMode(Params_1.Mode.ORDER);
            }
            if (paramsObject.pron === 0) {
                params.setPron(Params_1.Pronunciation.BRITISH);
            }
            if (paramsObject.pron === 1) {
                params.setPron(Params_1.Pronunciation.AMERICAN);
            }
        }
        return params;
    };
    return StorageUtil;
}());
exports.StorageUtil = StorageUtil;
//# sourceMappingURL=data:application/json;base64,