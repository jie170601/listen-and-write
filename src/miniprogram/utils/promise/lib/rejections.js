"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BaseError_1 = require("./BaseError");
var util_1 = require("./util");
var BaseUnhandledRejection = (function (_super) {
    __extends(BaseUnhandledRejection, _super);
    function BaseUnhandledRejection(name, message, reason) {
        var _this = _super.call(this, name, message + ": " + reason) || this;
        _this.reason = reason;
        var stack = _this.reason && typeof _this.reason === "object" && _this.reason.stack;
        if (typeof stack !== "string") {
            stack = String(_this.reason);
        }
        _this.stack = _this.name + ": " + stack;
        return _this;
    }
    return BaseUnhandledRejection;
}(BaseError_1.default));
exports.BaseUnhandledRejection = BaseUnhandledRejection;
var UnhandledRejection = (function (_super) {
    __extends(UnhandledRejection, _super);
    function UnhandledRejection(reason, trace) {
        var _this = _super.call(this, "UnhandledRejection", "unhandled rejection", reason) || this;
        _this.trace = trace;
        return _this;
    }
    return UnhandledRejection;
}(BaseUnhandledRejection));
exports.UnhandledRejection = UnhandledRejection;
var PossiblyUnhandledRejection = (function (_super) {
    __extends(PossiblyUnhandledRejection, _super);
    function PossiblyUnhandledRejection(promise) {
        var _this = _super.call(this, "PossiblyUnhandledRejection", "possibly unhandled rejection", promise.reason()) || this;
        _this.promise = promise;
        return _this;
    }
    return PossiblyUnhandledRejection;
}(BaseUnhandledRejection));
exports.PossiblyUnhandledRejection = PossiblyUnhandledRejection;
function emitRejectionEvent(type, reason, promise) {
    var event = new PromiseRejectionEvent(type, {
        cancelable: true,
        promise: true,
        reason: reason,
    });
    Object.defineProperty(event, "promise", {
        value: promise,
    });
    var global = util_1.getGlobal();
    if (global.dispatchEvent && !global.dispatchEvent(event)) {
        return true;
    }
    return false;
}
function defaultUnhandledRejectionHandler(reason, doneTrace) {
    var unhandledRejection = new UnhandledRejection(reason, doneTrace);
    throw unhandledRejection;
}
exports.defaultUnhandledRejectionHandler = defaultUnhandledRejectionHandler;
function defaultPossiblyUnhandledRejectionHandler(promise) {
    var log = true;
    if (typeof process !== "undefined" && typeof process.emit === "function") {
        if (process.emit("unhandledRejection", promise.reason(), promise)) {
            log = false;
        }
    }
    else if (typeof PromiseRejectionEvent === "function") {
        if (emitRejectionEvent("unhandledrejection", promise.reason(), promise)) {
            log = false;
        }
    }
    if (log) {
        var possiblyUnhandledRejection = new PossiblyUnhandledRejection(promise);
        console.warn(possiblyUnhandledRejection.stack);
    }
}
exports.defaultPossiblyUnhandledRejectionHandler = defaultPossiblyUnhandledRejectionHandler;
function defaultPossiblyUnhandledRejectionHandledHandler(promise) {
    if (typeof process !== "undefined" && typeof process.emit === "function") {
        process.emit("rejectionHandled", promise);
    }
    else if (typeof PromiseRejectionEvent === "function") {
        emitRejectionEvent("rejectionhandled", promise.reason(), promise);
    }
}
exports.defaultPossiblyUnhandledRejectionHandledHandler = defaultPossiblyUnhandledRejectionHandledHandler;
//# sourceMappingURL=data:application/json;base64,