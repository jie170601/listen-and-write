"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
var CallQueue = (function () {
    function CallQueue() {
        this.length = 0;
        this._max = 1000;
        this._first = 0;
    }
    CallQueue.prototype.push = function (callback, arg) {
        this[this.length++] = callback;
        this[this.length++] = arg;
        return this.length < this._max;
    };
    CallQueue.prototype.flush = function () {
        while (this._first < this.length) {
            var callback = this[this._first];
            var arg = this[this._first + 1];
            this[this._first] = this[this._first + 1] = undefined;
            this._first += 2;
            callback(arg);
        }
        this.length = 0;
        this._first = 0;
    };
    CallQueue.prototype.empty = function () {
        return this._first === this.length;
    };
    return CallQueue;
}());
var Ring = (function () {
    function Ring(pool) {
        this._ring = [new CallQueue()];
        this._current = this._ring[0];
        this._pool = pool;
    }
    Ring.prototype.enqueue = function (callback, arg) {
        if (!this._current) {
            this._current = this._pool.pop();
            if (!this._current) {
                this._current = new CallQueue();
            }
            this._ring.push(this._current);
        }
        if (!this._current.push(callback, arg)) {
            this._current = undefined;
        }
    };
    Ring.prototype.flush = function () {
        while (true) {
            this._ring[0].flush();
            if (this._ring.length === 1) {
                break;
            }
            this._pool.push(this._ring.shift());
        }
        this._current = this._ring[0];
    };
    Ring.prototype.empty = function () {
        return this._ring.length === 1 && this._ring[0].empty();
    };
    return Ring;
}());
function defaultScheduler(callback) {
    if (typeof setImmediate === "function") {
        setImmediate(callback);
    }
    else {
        setTimeout(callback, 0);
    }
}
var Async = (function () {
    function Async() {
        var _this = this;
        this._pool = [];
        this._mainRing = new Ring(this._pool);
        this._idleRing = new Ring(this._pool);
        this._flushing = false;
        this._scheduled = false;
        this._scheduler = undefined;
        this._flusher = function () { return _this._scheduledFlush(); };
    }
    Async.prototype.setScheduler = function (scheduler) {
        util_1.assert(scheduler === undefined || scheduler === null || typeof scheduler === "function");
        this._scheduler = scheduler;
    };
    Async.prototype.enqueue = function (callback, arg) {
        if (!this._flushing && !this._scheduled) {
            this._schedule();
        }
        this._mainRing.enqueue(callback, arg);
    };
    Async.prototype.enqueueIdle = function (callback, arg) {
        if (!this._flushing && !this._scheduled) {
            this._schedule();
        }
        this._idleRing.enqueue(callback, arg);
    };
    Async.prototype.flush = function () {
        util_1.assert(!this._flushing, "cannot recursively flush");
        this._flushing = true;
        try {
            while (true) {
                this._mainRing.flush();
                if (this._idleRing.empty()) {
                    break;
                }
                var emptyRing = this._mainRing;
                this._mainRing = this._idleRing;
                this._idleRing = emptyRing;
            }
        }
        finally {
            this._flushing = false;
            if ((!this._mainRing.empty() || !this._idleRing.empty()) && !this._scheduled) {
                this._schedule();
            }
        }
    };
    Async.prototype._schedule = function () {
        util_1.assert(!this._scheduled);
        var scheduler = this._scheduler || defaultScheduler;
        scheduler(this._flusher);
        this._scheduled = true;
    };
    Async.prototype._scheduledFlush = function () {
        this._scheduled = false;
        this.flush();
    };
    return Async;
}());
exports.Async = Async;
exports.async = new Async();
exports.default = exports.async;
//# sourceMappingURL=data:application/json;base64,