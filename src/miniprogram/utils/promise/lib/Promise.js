"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var async_1 = require("./async");
var rejections_1 = require("./rejections");
var Trace_1 = require("./Trace");
var util_1 = require("./util");
var trace;
var longTraces = false;
function internalResolver(fulfill, reject) {
}
internalResolver(undefined, undefined);
function noop() {
}
var getThenError = {
    error: undefined,
};
function wrapNonError(a) {
    return a;
}
var dummyDoneTrace = new Trace_1.default();
var unwrappingPromise;
var promiseIdCounter = 0;
var Promise = (function () {
    function Promise(resolver) {
        var _this = this;
        this._id = promiseIdCounter++;
        this._state = 0;
        this._result = undefined;
        this._handlers = undefined;
        this._flags = 0;
        this._trace = undefined;
        trace && trace(this, "construct");
        if (longTraces) {
            this._trace = new Trace_1.default(Promise);
            if (unwrappingPromise) {
                this._setSource(unwrappingPromise);
            }
        }
        if (resolver === internalResolver) {
            return;
        }
        if (typeof resolver !== "function") {
            throw new TypeError("Promise resolver is not a function");
        }
        var called = false;
        try {
            resolver(function (y) {
                if (called) {
                    return;
                }
                called = true;
                _this._resolve(y);
            }, function (r) {
                if (called) {
                    return;
                }
                called = true;
                _this._reject(wrapNonError(r));
            });
        }
        catch (e) {
            if (!called) {
                called = true;
                this._reject(wrapNonError(e));
            }
        }
    }
    Promise.prototype.then = function (onFulfilled, onRejected) {
        trace && trace(this, "then(" + typeof onFulfilled + ", " + typeof onRejected + ")");
        if (this._state === 1 && typeof onFulfilled !== "function" ||
            this._state === 2 && typeof onRejected !== "function") {
            return this;
        }
        var slave = new (Object.getPrototypeOf(this).constructor)(internalResolver);
        slave._setSource(this);
        this._enqueue(onFulfilled, onRejected, slave, undefined);
        return slave;
    };
    Promise.prototype.done = function (onFulfilled, onRejected) {
        trace && trace(this, "done(" + typeof onFulfilled + ", " + typeof onRejected + ")");
        if (this._state === 1 && typeof onFulfilled !== "function") {
            return;
        }
        var doneTrace = dummyDoneTrace;
        if (longTraces) {
            doneTrace = new Trace_1.default();
            if (this._trace) {
                doneTrace.setSource(this._trace);
            }
        }
        this._enqueue(onFulfilled, onRejected, undefined, doneTrace);
    };
    Promise.prototype.catch = function () {
        if (arguments.length === 1) {
            var onRejected = arguments[0];
            return this.then(undefined, onRejected);
        }
        else {
            var predicate_1 = arguments[0];
            var onRejected_1 = arguments[1];
            return this.then(undefined, function (reason) {
                var match = false;
                if (typeof predicate_1 === "function") {
                    if (predicate_1.prototype instanceof Error || predicate_1 === Error) {
                        match = reason instanceof predicate_1;
                    }
                    else {
                        match = predicate_1(reason);
                    }
                }
                else if (Array.isArray(predicate_1)) {
                    for (var _i = 0, predicate_2 = predicate_1; _i < predicate_2.length; _i++) {
                        var p = predicate_2[_i];
                        if (reason instanceof p) {
                            match = true;
                            break;
                        }
                    }
                }
                else {
                    throw new TypeError("invalid predicate to .catch(), got " + typeof predicate_1);
                }
                if (match) {
                    return onRejected_1(reason);
                }
                return Promise.reject(reason);
            });
        }
    };
    Promise.prototype.finally = function (handler) {
        var _this = this;
        var runner = function () { return handler(_this); };
        return this.then(runner, runner).return(this);
    };
    Promise.prototype.isFulfilled = function () {
        return this._state === 1;
    };
    Promise.prototype.isRejected = function () {
        return this._state === 2;
    };
    Promise.prototype.isPending = function () {
        return this._state === 0;
    };
    Promise.prototype.value = function () {
        if (!this.isFulfilled()) {
            throw new Error("Promise is not fulfilled");
        }
        return this._result;
    };
    Promise.prototype.reason = function () {
        if (!this.isRejected()) {
            throw new Error("Promise is not rejected");
        }
        return this._result;
    };
    Promise.prototype.suppressUnhandledRejections = function () {
        this._setRejectionHandled();
    };
    Promise.prototype.inspect = function () {
        return this.toString();
    };
    Promise.prototype.toString = function () {
        var state;
        switch (this._state) {
            case 0:
                state = "pending";
                break;
            case 1:
                state = "fulfilled";
                break;
            case 2:
                state = "rejected";
                break;
            default: state = "unknown";
        }
        return "[Promise " + this._id + ": " + state + "]";
    };
    Promise.prototype.delay = function (ms) {
        return this.then(function (value) {
            return new Promise(function (resolve) {
                setTimeout(function () { return resolve(value); }, ms);
            });
        });
    };
    Promise.prototype.return = function (value) {
        if (value === undefined) {
            return this.then(noop);
        }
        return this.then(function () { return value; });
    };
    Promise.prototype.throw = function (reason) {
        return this.then(function () { return Promise.reject(reason); });
    };
    Promise.prototype._setSource = function (source) {
        if (!this._trace || !source._trace) {
            return;
        }
        this._trace.setSource(source._trace);
    };
    Promise.prototype._resolve = function (x) {
        util_1.assert(this._state === 0);
        if (!x) {
            this._fulfill(x);
            return;
        }
        if (this === x) {
            this._reject(new TypeError("cannot resolve Promise to self"));
            return;
        }
        if (x instanceof Promise) {
            x._setSource(this);
            x._setRejectionHandled();
            if (x._state === 0) {
                this._followPromise(x);
            }
            else if (x._state === 1) {
                this._fulfill(x._result);
            }
            else {
                this._reject(x._result);
            }
            return;
        }
        if (typeof x === "object" || typeof x === "function") {
            var then = this._tryGetThen(x);
            if (then === getThenError) {
                this._reject(wrapNonError(getThenError.error));
                return;
            }
            if (typeof then === "function") {
                this._followThenable(x, then);
                return;
            }
        }
        this._fulfill(x);
    };
    Promise.prototype._tryGetThen = function (x) {
        try {
            var then = x.then;
            return then;
        }
        catch (e) {
            getThenError.error = e;
            return getThenError;
        }
    };
    Promise.prototype._fulfill = function (value) {
        util_1.assert(this._state === 0);
        trace && trace(this, "_fulfill(" + typeof value + ")");
        this._state = 1;
        this._result = value;
        this._flush();
    };
    Promise.prototype._reject = function (reason) {
        util_1.assert(this._state === 0);
        trace && trace(this, "_reject(" + reason + ")");
        this._state = 2;
        this._result = reason;
        if (this._trace && this._result instanceof Error && !this._result.trace) {
            var stackTrace_1 = this._trace;
            this._result.trace = stackTrace_1;
            var originalStack_1 = this._result.stack;
            if (originalStack_1) {
                Object.defineProperty(this._result, "stack", {
                    enumerable: false,
                    get: function () { return originalStack_1 + "\n  from Promise at:\n" + stackTrace_1.inspect(); },
                });
            }
        }
        if (!(this._flags & 1)) {
            async_1.default.enqueueIdle(Promise._unhandledRejectionChecker, this);
        }
        this._flush();
    };
    Promise.prototype._setRejectionHandled = function () {
        if (!(this._flags & 1) && (this._flags & 2)) {
            async_1.default.enqueue(Promise._onPossiblyUnhandledRejectionHandledHandler, this);
        }
        this._flags |= 1;
        trace && trace(this, "rejectionHandled");
    };
    Promise.prototype._doCheckUnhandledRejection = function () {
        if (!(this._flags & 1) && !(this._flags & 2)) {
            this._flags |= 2;
            async_1.default.enqueue(Promise._onPossiblyUnhandledRejectionHandler, this);
        }
    };
    Promise.prototype._followPromise = function (slave) {
        util_1.assert(this._state === 0);
        trace && trace(this, "_follow([Promise " + slave._id + "])");
        slave._enqueue(undefined, undefined, this, undefined);
    };
    Promise.prototype._followThenable = function (slave, then) {
        var _this = this;
        util_1.assert(this._state === 0);
        trace && trace(this, "_follow([Thenable])");
        var called = false;
        try {
            then.call(slave, function (y) {
                if (called) {
                    return;
                }
                called = true;
                _this._resolve(y);
            }, function (r) {
                if (called) {
                    return;
                }
                called = true;
                _this._reject(wrapNonError(r));
            });
        }
        catch (e) {
            if (!called) {
                called = true;
                this._reject(wrapNonError(e));
            }
        }
    };
    Promise.prototype._enqueue = function (onFulfilled, onRejected, slave, done) {
        var h = {
            promise: this,
            onFulfilled: onFulfilled,
            onRejected: onRejected,
            slave: slave,
            done: done,
        };
        if (this._state !== 0) {
            async_1.default.enqueue(Promise._unwrapper, h);
        }
        else {
            if (!this._handlers) {
                this._handlers = [h];
            }
            else {
                var i = this._handlers.length;
                this._handlers[i] = h;
            }
        }
        this._setRejectionHandled();
    };
    Promise.prototype._flush = function () {
        if (!this._handlers) {
            return;
        }
        var i = 0;
        var h = this._handlers;
        var l = h.length;
        this._handlers = undefined;
        while (i < l) {
            async_1.default.enqueue(Promise._unwrapper, h[i++]);
        }
    };
    Promise.prototype._unwrap = function (handler) {
        var callback = this._state === 1 ? handler.onFulfilled : handler.onRejected;
        if (handler.done) {
            trace && trace(this, "_unwrap()");
            if (typeof callback !== "function") {
                if (this._state === 2) {
                    Promise._onUnhandledRejectionHandler(this._result, handler.done);
                }
                return;
            }
            util_1.assert(!unwrappingPromise);
            unwrappingPromise = this;
            try {
                var result = callback(this._result);
                if (result) {
                    var p = (result instanceof Promise) ? result : Promise.resolve(result);
                    p.done();
                }
                unwrappingPromise = undefined;
            }
            catch (e) {
                unwrappingPromise = undefined;
                Promise._onUnhandledRejectionHandler(e, handler.done);
            }
            return;
        }
        var slave = handler.slave;
        trace && trace(this, "_unwrap(" + slave._id + ")");
        if (typeof callback === "function") {
            util_1.assert(!unwrappingPromise);
            unwrappingPromise = slave;
            try {
                slave._resolve(callback(this._result));
            }
            catch (e) {
                slave._reject(wrapNonError(e));
            }
            unwrappingPromise = undefined;
        }
        else {
            if (this._state === 1) {
                slave._fulfill(this._result);
            }
            else {
                slave._reject(this._result);
            }
        }
    };
    Promise.resolve = function (value) {
        var p = new Promise(internalResolver);
        p._resolve(value);
        return p;
    };
    Promise.reject = function (reason) {
        var p = new Promise(internalResolver);
        p._reject(reason);
        return p;
    };
    Promise.all = function (thenables) {
        return new Promise(function (resolve, reject) {
            util_1.assert(Array.isArray(thenables), "thenables must be an Array");
            if (thenables.length === 0) {
                resolve([]);
                return;
            }
            var result = new Array(thenables.length);
            var remaining = thenables.length;
            for (var i = 0; i < thenables.length; i++) {
                follow(thenables[i], i);
            }
            function follow(t, index) {
                var slave = t instanceof Promise ? t : Promise.resolve(t);
                slave.done(function (v) {
                    result[index] = v;
                    remaining--;
                    if (remaining === 0) {
                        resolve(result);
                    }
                }, function (reason) { return reject(reason); });
            }
        });
    };
    Promise.race = function (thenables) {
        return new Promise(function (resolve, reject) {
            util_1.assert(Array.isArray(thenables), "thenables must be an Array");
            for (var _i = 0, thenables_1 = thenables; _i < thenables_1.length; _i++) {
                var t = thenables_1[_i];
                var slave = t instanceof Promise ? t : Promise.resolve(t);
                Promise.resolve(slave).done(resolve, reject);
            }
        });
    };
    Promise.defer = function () {
        var resolve;
        var reject;
        var p = new Promise(function (res, rej) {
            resolve = res;
            reject = rej;
        });
        return {
            promise: p,
            reject: reject,
            resolve: resolve,
        };
    };
    Promise.delay = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (arguments[1] === undefined) {
            var ms_1 = arguments[0];
            return new Promise(function (resolve) {
                setTimeout(resolve, ms_1);
            });
        }
        return Promise.resolve(arguments[0]).delay(arguments[1]);
    };
    Promise.onUnhandledRejection = function (handler) {
        if (handler === true) {
            Promise._onUnhandledRejectionHandler = rejections_1.defaultUnhandledRejectionHandler;
        }
        else if (handler === false) {
            Promise._onUnhandledRejectionHandler = noop;
        }
        else if (typeof handler !== "function") {
            throw new TypeError("invalid handler: boolean or function expected");
        }
        else {
            Promise._onUnhandledRejectionHandler = handler;
        }
    };
    Promise.onPossiblyUnhandledRejection = function (handler) {
        if (handler === true) {
            Promise._onPossiblyUnhandledRejectionHandler = rejections_1.defaultPossiblyUnhandledRejectionHandler;
        }
        else if (handler === false) {
            Promise._onPossiblyUnhandledRejectionHandler = noop;
        }
        else if (typeof handler !== "function") {
            throw new TypeError("invalid handler: boolean or function expected");
        }
        else {
            Promise._onPossiblyUnhandledRejectionHandler = handler;
        }
    };
    Promise.onPossiblyUnhandledRejectionHandled = function (handler) {
        if (handler === true) {
            Promise._onPossiblyUnhandledRejectionHandledHandler = rejections_1.defaultPossiblyUnhandledRejectionHandledHandler;
        }
        else if (handler === false) {
            Promise._onPossiblyUnhandledRejectionHandledHandler = noop;
        }
        else if (typeof handler !== "function") {
            throw new TypeError("invalid handler: boolean or function expected");
        }
        else {
            Promise._onPossiblyUnhandledRejectionHandledHandler = handler;
        }
    };
    Promise.setLongTraces = function (enable) {
        longTraces = enable;
    };
    Promise.setTracer = function (tracer) {
        if (typeof tracer === "function") {
            trace = tracer;
        }
        else {
            trace = undefined;
        }
    };
    Promise.flush = function () {
        async_1.default.flush();
    };
    Promise._unwrapper = function (handler) {
        handler.promise._unwrap(handler);
    };
    Promise._unhandledRejectionChecker = function (promise) {
        promise._doCheckUnhandledRejection();
    };
    return Promise;
}());
exports.Promise = Promise;
Promise.onUnhandledRejection(true);
Promise.onPossiblyUnhandledRejection(true);
Promise.onPossiblyUnhandledRejectionHandled(true);
exports.default = Promise;
//# sourceMappingURL=data:application/json;base64,